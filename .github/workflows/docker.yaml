name: Docker
on:
  pull_request:
    paths:
      - .github/workflows/docker.yaml
  push:
    branches: [main]
  schedule:
    - cron: "16 0 * * 0"

jobs:
  release:
    name: Release images
    strategy:
      matrix:
        tag: [devcontainer]
        include:
          - tag: devcontainer
            target: devcontainer
            manifest_platforms: |
              amd64
              arm64
            rust: latest,1.58,1.57,1.56
            username: bitski

          - tag: |
              rust
              rust-1.58
            target: rust
            rust: "1.58"

          - tag: rust-1.57
            target: rust
            rust: "1.57"

          - tag: rust-1.56
            target: rust
            rust: "1.56"

    runs-on: ubuntu-latest
    env:
      # Use Docker buildx
      DOCKER_BUILDKIT: "1"
      # github.repository as <account>/<repo>
      IMAGE_NAME: ${{ github.repository }}
      TAGS: ${{ matrix.tag }}
      # Use docker.io for Docker Hub if empty
      REGISTRY: ghcr.io

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure image tags for multiarch manifest
        if: matrix.manifest_platforms
        run: |
          set -o xtrace

          ARCH=`uname -m`
          case $ARCH in
          amd64 | x86_64) 
              ARCH=amd64
              ;;
          aarch64 | arm64) 
              ARCH=arm64
              ;;
          esac

          TAGS=`echo "$TAGS" | sed "s/\$/-$ARCH/"`

          echo "TAGS=$(printf '%q' "$TAGS")" | tee -a $GITHUB_ENV

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
        with:
          driver-opts: network=host

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ env.TAGS }}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into Docker registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        env:
          SCOPE: ${{ runner.os }}-${{ runner.arch }}-docker
        with:
          context: .
          target: ${{ matrix.target }}
          build-args: |
            USERNAME=${{ matrix.username }}
            RUST_VERSION=${{ matrix.rust }}
          cache-from: type=gha,scope=${{ env.SCOPE }}
          cache-to: type=gha,scope=${{ env.SCOPE }},mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create multiarch manifest
        if: matrix.manifest_platforms
        env:
          PLATFORMS: ${{ matrix.manifest_platforms }}
          BASE_TAGS: ${{ matrix.tag }}
          BASE_MANIFEST: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        run: |
          set -o xtrace

          IFS=$'\n' command eval 'PLATFORMS=($PLATFORMS)'
          IFS=$'\n' command eval 'BASE_TAGS=($BASE_TAGS)'
          BASE_MANIFEST="${BASE_MANIFEST,,}"

          MANIFESTS=()
          for BASE_TAG in "${BASE_TAGS[@]}"; do
            MANIFEST="${BASE_MANIFEST}:${BASE_TAG}"

            AMEND=()
            for PLATFORM in "${PLATFORMS[@]}"; do
              IMAGE_NAME="${MANIFEST}-${PLATFORM}"
              docker pull "$IMAGE_NAME"
              AMEND+=(--amend "$IMAGE_NAME")
            done

            docker manifest create "$MANIFEST" "${AMEND[@]}"
            MANIFESTS+=("$MANIFEST")
          done

          MANIFESTS=`IFS=$'\n'; echo "${MANIFESTS[*]}"`
          echo "MANIFESTS=$(printf '%q' "$MANIFESTS")" | tee -a $GITHUB_ENV

      - name: Push multiarch manifest
        if: github.event_name != 'pull_request' && matrix.manifest_platforms
        run: |
          set -o xtrace
          echo "$MANIFESTS" | xargs -n1 docker manifest push
