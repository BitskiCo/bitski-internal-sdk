name: Docker

on:
  workflow_call:
    inputs:
      registry:
        description: "Docker registry"
        type: string
        default: ghcr.io
        required: false
      registry_username:
        description: "Docker registry username"
        default: ${{ github.actor }}
        type: string
        required: false
      file:
        description: "Path to Dockerfile"
        type: string
        default: Dockerfile
        required: false
      context:
        description: "Path to Docker build context"
        type: string
        default: "."
        required: false
      image_name:
        description: "Docker image name. Default: github.repository"
        type: string
        required: false
      tags:
        description: "Docker tags"
        type: string
        default: |
          type=schedule
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=sha,format=long
        required: false
      target:
        description: "Target stage to build"
        type: string
        required: false
      build_args:
        description: "Docker build args"
        type: string
        required: false
      archs:
        description: >-
          Architectures to include in multi-arch manifest. Only the native
          architecture image will be built as `<image-name>-<arch>`, e.g.
          `devcontainer-amd64`. Other platform images must exist in the
          registry as `<image-name>-<arch>`. The multi-arch build will include
          the latest `<image-name>-<arch>` images in the multi-arch manifest.
        type: string
        required: false
      push:
        description: "If true, push the build to the registry"
        type: boolean
        default: false
        required: false
      load_artifacts:
        description: "Download and import the Docker images with the given artifact names"
        type: string
        required: false
      save_artifact:
        description: "Upload the Docker image with the given artifact name"
        type: string
        required: false
      cache:
        description: "Enable cache"
        type: boolean
        default: false
        required: false
      cache_tag:
        description: "A tag to scope the Docker cache"
        type: string
        default: docker
        required: false
      sccache:
        description: "Enable sccache"
        type: boolean
        default: false
        required: false
      startup_test:
        description: "Run startup test with docker-compose"
        type: boolean
        required: false
      startup_compose_file:
        description: "Path to docker-compose.yaml file to use for startup test"
        type: string
        default: docker-compose.yaml
        required: false
      startup_image_env_name:
        description: "Environment variables to set as the built image name"
        type: string
        required: false
      startup_timeout:
        description: "Timeout for startup test"
        type: string
        default: 5m
        required: false
      submodules:
        description: "Checkout submodules"
        type: string
        required: false
      matrix:
        description: "JSON-encoded GitHub Actions matrix instance"
        type: string
        required: false
      dockle:
        description: "Lint built container with Dockle"
        type: boolean
        default: true
        required: false
      trivy:
        description: "Scan built container for vulnerabilities with Trivy"
        type: boolean
        default: true
        required: false
    secrets:
      registry_password:
        description: "Docker registry password, defaults to GITHUB_TOKEN"
        required: false
      build_args:
        description: "Docker build args"
        required: false
      build_secrets:
        description: "Docker build secrets"
        required: false
      build_secret_files:
        description: "Docker build secrets files"
        required: false
      ssh_private_keys:
        description: "SSH private keys, e.g. GitHub Deploy Keys"
        required: false

jobs:
  build_and_push:
    name: Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      TAGS: ${{ inputs.tags }}
      LOCAL_IMAGE: 127.0.0.1:5000/${{ github.sha }}
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.submodules }}

      - name: Configure image tags
        env:
          REGISTRY: ${{ inputs.registry }}
          IMAGE_NAME: ${{ inputs.image_name || github.repository }}
        run: |
          if [[ -n "$REGISTRY" ]]; then
            echo "IMAGES=${REGISTRY,,}/${IMAGE_NAME,,}" | tee -a $GITHUB_ENV
          else
            echo "IMAGES=${IMAGE_NAME,,}" | tee -a $GITHUB_ENV
          fi

      - name: Configure image tags for multiarch manifest
        if: inputs.archs
        run: |
          ARCH=`uname -m`
          case $ARCH in
          amd64 | x86_64) 
              ARCH=amd64
              ;;
          aarch64 | arm64) 
              ARCH=arm64
              ;;
          esac

          TAGS=`echo "$TAGS" | sed "s/\$/-$ARCH/"`

          echo "TAGS=$(printf '%q' "$TAGS")" | tee -a $GITHUB_ENV

      # Workaround for lack of support for `secrets` in `if` clause
      - name: Detect SSH
        id: ssh
        run: |
          if ${{ secrets.ssh_private_keys != null }}; then
            echo "Found SSH private keys"
            echo "::set-output name=use::true"
          fi

      - name: Configure SSH Agent
        if: steps.ssh.outputs.use
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.ssh_private_keys }}

      - name: Save Git and SSH config
        run: |
          if ${{ steps.ssh.outputs.use != null }}; then
            cat ~/.gitconfig

            mkdir -p .ssh
            cp -r ~/.ssh/* .ssh/
            sed -i 's@/home/runner/.ssh/@/root/.ssh/@g' .ssh/config
            cat .ssh/config
          fi
          touch .gitconfig
          touch .sshconfig

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
          install: true

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGES }}
          tags: ${{ env.TAGS }}

      - name: Log into Docker registry
        if: inputs.push
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.registry_username || github.actor }}
          password: ${{ secrets.registry_password || github.token }}

      - name: Download all workflow run artifacts
        id: download
        if: inputs.load_artifacts
        uses: actions/download-artifact@v2
        with:
          path: /tmp/artifacts

      - name: Load image artifacts
        if: inputs.load_artifacts
        env:
          ARTIFACTS: ${{ inputs.load_artifacts }}
          DOWNLOAD_PATH: ${{ steps.download.outputs.download-path }}
        run: |
          IFS=$'\n ' command eval 'ARTIFACTS=($ARTIFACTS)'
          for ARTIFACT in "${ARTIFACTS[@]}"; do
            echo "::group::docker image load $ARTIFACT"
            cat "$DOWNLOAD_PATH/$ARTIFACT/${ARTIFACT}.docker.tar.xz" | \
              xz --decompress --stdout | \
              docker image load | \
              tee /dev/stdout | \
              sed 's/^Loaded image: //' | \
              xargs -n1 docker push
            echo '::endgroup::'
          done
          rm -rf "$DOWNLOAD_PATH"

      - name: Configure Docker build args
        id: docker_args
        run: |
          if ${{ inputs.cache }}; then
            if [ -f /tmp/.buildx-cache/index.json ]; then
              echo "::set-output name=cache_from::type=local,src=/tmp/.buildx-cache"
            fi
            echo "::set-output name=cache_to::type=local,dest=/tmp/.buildx-cache-new,mode=max"
          fi

          if [[ -n "$SSH_AUTH_SOCK" ]]; then
            echo "::set-output name=ssh::default=$SSH_AUTH_SOCK"
          fi

      - name: Cache Docker layers
        if: inputs.cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.arch }}-${{ inputs.cache_tag }}-${{ hashFiles(inputs.file) }}
          restore-keys: ${{ runner.arch }}-${{ inputs.cache_tag }}-

      - name: Expose GitHub Actions vars
        if: inputs.sccache
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('SCCACHE_BUILD_ARGS', `
            ACTIONS_CACHE_URL=${process.env.ACTIONS_CACHE_URL || ''}
            ACTIONS_RUNTIME_TOKEN=${process.env.ACTIONS_RUNTIME_TOKEN || ''}
            SCCACHE_GHA_CACHE_MODE=${process.env.GITHUB_REF_PROTECTED === 'true' ? 'write' : ''}
            `);

      - name: Build Docker image
        id: docker
        uses: docker/build-push-action@v2
        with:
          file: ${{ inputs.file }}
          context: ${{ inputs.context }}
          build-args: |
            ${{ env.SCCACHE_BUILD_ARGS }}
            ${{ inputs.build_args }}
            ${{ secrets.build_args }}
          ssh: ${{ steps.docker_args.outputs.ssh }}
          cache-from: ${{ steps.docker_args.outputs.cache_from }}
          cache-to: ${{ steps.docker_args.outputs.cache_to }}
          push: true
          tags: ${{ env.LOCAL_IMAGE }}
          labels: ${{ steps.meta.outputs.labels }}
          target: ${{ inputs.target }}
          secrets: ${{ secrets.build_secrets }}
          secret-files: |
            GIT_CONFIG=/home/runner/.gitconfig
            ${{ secrets.build_secret_files }}

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Replace Docker cache
        if: inputs.cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Load and tag Docker image
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          docker pull "$LOCAL_IMAGE"
          IFS=$'\n ' command eval 'TAGS=($TAGS)'
          for TAG in "${TAGS[@]}"; do
            docker tag "$LOCAL_IMAGE" "$TAG"
          done

      - name: Run startup tests
        if: inputs.startup_test
        env:
          FILE: ${{ inputs.startup_compose_file }}
          IMAGE_ENV_NAME: ${{ inputs.startup_image_env_name }}
          STARTUP_TIMEOUT: ${{ inputs.startup_timeout }}
        run: |
          if [[ -n "$IMAGE_ENV_NAME" ]]; then
            eval "export $IMAGE_ENV_NAME=$LOCAL_IMAGE"
          fi

          echo '::group::docker compose create'
          docker compose --file "$FILE" create
          echo '::endgroup::'

          echo '::group::docker compose up'
          timeout "${STARTUP_TIMEOUT}" docker compose --file "$FILE" up --wait
          EXIT_CODE=$?
          echo '::endgroup::'

          echo '::group::docker compose logs'
          docker compose --file "$FILE" logs
          echo '::endgroup::'

          echo '::group::docker compose down'
          docker compose --file "$FILE" kill
          docker compose --file "$FILE" down
          echo '::endgroup::'

          exit $EXIT_CODE

      - name: Cache Trivy and Dockle cache
        if: inputs.trivy || inputs.dockle
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.cache
          key: ${{ runner.os }}-${{ runner.arch }}-lint-${{ inputs.cache_tag }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-lint-${{ inputs.cache_tag }}-
            ${{ runner.os }}-${{ runner.arch }}-lint-

      - name: Scan for vulnerabilities with Trivy
        if: inputs.trivy
        env:
          CACHE_DIR: ${{ github.workspace }}/.cache
          MATRIX: ${{ inputs.matrix }}
        run: |
          echo '::group::docker pull bitnami/trivy'
          docker pull bitnami/trivy
          echo '::endgroup::'

          echo '::group::Trivy'
          mkdir -p "$CACHE_DIR/trivy"
          set +e
          docker run --rm --user root:root \
            --network host \
            --volume "$CACHE_DIR/trivy:/var/cache/trivy" \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            bitnami/trivy --cache-dir /var/cache/trivy image \
            --insecure --exit-code 1 "$LOCAL_IMAGE"
          TRIVY_STATUS=$?
          set -e
          sudo chown -R $USER:$GROUP "$CACHE_DIR/trivy"
          echo '::endgroup::'

          if [[ $TRIVY_STATUS != 0 ]]; then
            PREFIX=`echo "$MATRIX" | jq -r '[. | to_entries | .[].value] | join(" / ")'`
            if [[ -n "$PREFIX" ]]; then PREFIX="${PREFIX/%/ / }"; fi
            echo "::warning title=${PREFIX}Trivy::Vulnerabilities found, please review logs"
          fi

      # TODO(jacob): Integrate Trivy with GitHub Security
      # - name: Upload Trivy scan results to the GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     sarif_file: trivy-results.sarif
      #     matrix: ${{ inputs.matrix || 'null' }}

      # TODO(jacob): Configure Dockle lint
      - name: Lint with Dockle
        if: inputs.dockle
        env:
          CACHE_DIR: ${{ github.workspace }}/.cache
          MATRIX: ${{ inputs.matrix }}
        run: |
          echo '::group::docker pull goodwithtech/dockle'
          docker pull goodwithtech/dockle
          echo '::endgroup::'

          echo '::group::Dockle'
          mkdir -p "$CACHE_DIR/dockle"
          set +e
          docker run --rm --user root:root \
            --network host \
            --volume "$CACHE_DIR/dockle:/var/cache/dockle" \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            goodwithtech/dockle --cache-dir /var/cache/dockle \
            --insecure --timeout 10m --exit-code 1 "$LOCAL_IMAGE"
          DOCKLE_STATUS=$?
          set -e
          sudo chown -R $USER:$GROUP "$CACHE_DIR/dockle"
          echo '::endgroup::'

          if [[ $DOCKLE_STATUS != 0 ]]; then
            PREFIX=`echo "$MATRIX" | jq -r '[. | to_entries | .[].value] | join(" / ")'`
            if [[ -n "$PREFIX" ]]; then PREFIX="${PREFIX/%/ / }"; fi
            echo "::warning title=${PREFIX}Dockle::Lint errors, please review logs"
          fi

      - name: Push Docker image
        if: inputs.push
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          IFS=$'\n ' command eval 'TAGS=($TAGS)'
          for TAG in "${TAGS[@]}"; do
            echo "::group::docker push $TAG"
            docker push "$TAG"
            echo '::endgroup::'
          done

      - name: Create multiarch manifest
        id: manifest
        if: inputs.archs
        env:
          ARCHS: ${{ inputs.archs }}
          BASE_TAGS: ${{ inputs.tags }}
          BASE_MANIFEST: ${{ env.IMAGES }}
          BUILT_TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          IFS=$'\n ' command eval 'ARCHS=($ARCHS)'
          IFS=$'\n ' command eval 'BASE_TAGS=($BASE_TAGS)'
          IFS=$'\n ' command eval 'BUILT_TAGS=($BUILT_TAGS)'
          BUILT_TAGS="^($(IFS=\|; echo "${BUILT_TAGS[*]}"))$"

          MANIFESTS=()
          for BASE_TAG in "${BASE_TAGS[@]}"; do
            MANIFEST="${BASE_MANIFEST}:${BASE_TAG}"

            AMEND=()
            for PLATFORM in "${ARCHS[@]}"; do
              IMAGE_NAME="${MANIFEST}-${PLATFORM}"
              echo "::group::docker pull $IMAGE_NAME"
              if [[ "$IMAGE_NAME" =~ $BUILT_TAGS ]]; then
                echo "Not pulling built image $IMAGE_NAME"
              else
                docker pull "$IMAGE_NAME"
              fi
              echo '::endgroup::'
              AMEND+=(--amend "$IMAGE_NAME")
            done

            echo "::group::docker manifest create"
            docker manifest create "$MANIFEST" "${AMEND[@]}"
            echo '::endgroup::'
            MANIFESTS+=("$MANIFEST")
          done

          MANIFESTS=`IFS=$'\n'; echo "${MANIFESTS[*]}"`
          MANIFESTS=`printf '%q' "$MANIFESTS"`
          echo "::set-output name=manifests::$MANIFESTS"

      - name: Push multiarch manifest
        if: inputs.push && steps.manifest.outputs.manifests
        env:
          MANIFESTS: ${{ steps.manifest.outputs.manifests }}
        run: |
          IFS=$'\n ' command eval 'MANIFESTS=($MANIFESTS)'
          for MANIFEST in "${MANIFESTS[@]}"; do
            echo "::group::docker manifest push $MANIFEST"
            docker manifest push "$MANIFEST"
            echo '::endgroup::'
          done

      - name: Save image tar
        if: inputs.save_artifact
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          FILE: ${{ inputs.save_artifact }}.docker.tar.xz
        run: |
          IFS=$'\n ' command eval 'TAGS=($TAGS)'
          docker image save "${TAGS[@]}" | xz --compress -0 --stdout > "$FILE"

      - name: Upload image tar as artifact
        if: inputs.save_artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.save_artifact }}
          path: ${{ inputs.save_artifact }}.docker.tar.xz
          retention-days: 1
